<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>高性能服务器 on 张不大的博客</title>
    <link>https://tutuwu2019.github.io/blog/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
    <description>Recent content in 高性能服务器 on 张不大的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright © 2024, zhangbdua.</copyright>
    <lastBuildDate>Wed, 08 May 2024 16:10:36 +0800</lastBuildDate><atom:link href="https://tutuwu2019.github.io/blog/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>高性能服务器</title>
      <link>https://tutuwu2019.github.io/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Wed, 08 May 2024 16:10:36 +0800</pubDate>
      
      <guid>https://tutuwu2019.github.io/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>高性能服务器分析 声明：一点点自己的总结与感悟吧，如果有不对的地方，烦请指正
服务器最重要的是能够解决复杂的网络问题，大量并发请求，如经典的c10K ，当然后面这个并发问题延伸到c10M
当然这个 c10k 已经被从硬件和软件两个方面解决了，硬件方面应该是在 摩尔定律上下功夫？ 软件方面就有很多方向了，然后接下来着重讲软件方面的解决方案
OS &amp;amp; question 有人说，操作系统的底层设计让通信开销增大
原话是，os 的内核不是解决c10M问题的办法，相反os 的内核正是导致C10M问题的关键
简单解释一下，比如网络包进入网卡，然后通过网卡进入内核处理，内核接着拷贝把数据转给用户程序处理，再把处理的数据通过网卡发送客户端
大致的思路是这样，然后就有人在这里分析，分析的结论有以下几个方面
中断处理，频繁的硬件中断请求会增加os资源的开销，尤其是硬件中断会打断低级的软中断或者系统调用的执行过程，这种打断会增加一定的性能开销 内存拷贝，数据包从网卡到内核开辟的缓冲区，再由内核缓冲区到用户态空间，在linux 内核协议栈汇中的耗时占到了整个数据包处理过程的57.1% 上下文切换，频繁的中断处理，会产生大量的上下文切换开销，而且可能涉及资源竞争，这就会涉及锁的处理，用锁也是一个很大开销 局部性失效，在多核处理器中，一个数据包跨多个cpu核心，如数据包中断在cpu0，内核处理在cpu1，用户态处理在cpu2，这样跨多核，容易增加cpu缓存失效，造成局部性失效 内存管理，服务器内存页4k ？然后为了提高内存的访问速度，避免cache miss ，增加cache 的映射表条目，但是这增加了cpu 检索效率 当然也有解决方案
控制层和数据层分层 多核技术 NUMA 亲和性 大页存技术 无锁技术 解决案例 是的，有一些包含上述的解决方案的网络框架（🤦）好像有很多很多网络框架，都说自己贼牛逼（高可用、分布式、高性能
具体到的有，6wind、Windriver、Netmap、DPDK
这个DPDK 其实好像很火，后面可以有空研究一下
心得 好像，自己写过的项目，高性能是这样走的，
首先是对数据的处理，使用各种池 线程池（Thread Pool）
线程池是预先创建一组线程，任务提交后将分配给空闲的线程处理。线程池用于避免线程频繁创建和销毁的开销，提高并发性能。
数据库连接池（Connection Pool）
数据库连接池管理数据库连接。它预先创建一组数据库连接，并在需要时分配。这样可以减少每次连接数据库的开销，提高数据库操作的性能。
对象池（Object Pool）
对象池用于管理可重复使用的对象，避免对象的频繁创建和销毁。对象池可以用在各种场景，如游戏开发中的游戏对象、数据库连接、网络资源等。
缓存池（Cache Pool）
缓存池用于管理缓存，提供快速访问数据的能力。缓存池通常用于提高系统性能和响应速度，减少数据库或其他后端系统的负载。
线程本地池（Thread Local Pool）
线程本地池为每个线程创建一组独立的资源，确保每个线程都有自己独立的资源池。这在需要避免线程间资源共享的情况下非常有用。
内存池（Memory Pool）
内存池用于管理内存块。通过预先分配一块大内存，然后从中划分小块，减少内存分配和释放的开销。这种技术在需要频繁分配和释放内存的应用中非常有用。
连接池（Connection Pool）
连接池可以用于网络连接管理。它类似于数据库连接池，但用于管理网络连接，如与服务器、外部服务等的连接。
资源池（Resource Pool）
资源池可以管理各种类型的资源，如线程、对象、连接等。资源池的目的是提高资源利用率，减少资源创建和销毁的开销。
消息池（Message Pool）</description>
    </item>
    
  </channel>
</rss>
